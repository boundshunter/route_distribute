一、路由系统  URL
    1.url(r'^index/', views.index),  url(r'^index/', views.Index.as_view()),
    2.url(r'^detail-(\d+).html', views.detail),
    3.url(r'^detail-(?P<nid>\d+)-(?P<uid>\d+).html', views.detail)

            def detail(request, *args, **kwargs):
                pass
            def func(request,nid,uid):
                pass
            def func(request,**kwargs):
                kwarts = {'nid':1,'uid':3}

            def func(request,*args, **kwargs):
                args=(2,9)
    4.name
      对URL路由关系进行命名：**** 以后根据此名称生成想要的url *****

      url(r'^auv/', views.index, name='i1')
      url(r'^yug/(\d+)', views.index, name='i2')
      url(r'^buy/(?P<pid>\d+)/((?P<nid>\d+)/', views.index, name='i3')
          form表单中 action = {% url "i1" %}
          form表单中 action = {% url "i2" num %}
          form表单中 action = {% url "i2" 3 %} 一个\d+ 一个数字，多个\d+多个数字 空格分离
          form表单中 action = {% url "i2" 3 %}


      def func(request, *args, **kwargs):
        from django.urls import reverse
        url1 = reverse('i1')                            # auv/
        url2 = reverse('i2',args = (1,2,))              # yug/1/2/
        url3 = reverse('i3', kwargs={'pid':1,"nid":9}   # buy/1/9/

      xxx.html
        {% url "i1" %}                  # auv/
        {% url "i2" 1 2 %}              # yug/1/2/
        {% url "i3" nid=3 pid=4 %}      # buy/3/4/



        注：当前的url 获取
        request.path_info

    5. 路由分发


二：视图 views
    1.
        request.GET
        request.POST
        request.FILES
    2.
        # checkbox 等多选的内容
        request.POST.getList()
    3.
        # 上传文件 form 标签做特殊设置 enctype="multipart/form-data"
        obj = request.FILES.get('filename')
        file_path = os.path.join('upload',obj.name)
        print(file_path)
        f = open(obj.name,mode='wb)
        for item in obj.chunks():
            f.write(item)
        f.close()
    4.  FBV  & CBV
        FBV: function   base    view
        CBV: class  base    view

        FBV:
            urls.py
                index   -->     view.函数名
            view.py
                def 函数名(request):

        CBV
            urls.py
                index   -->     view.classname.as_view()
四： ORM操作
    select * from tb where id>1
    对应关系
    models.tb.objects.filter(id_gt=1)
    id=1
    models.tb.objects.filter(id=1)
    id>1
    models.tb.objects.filter(id_lt=1)

    创建类
	a.先写类：
		from django.db import models

		#app01 userinfo
		class UserInfo(models.Model):
			#id列，自增，逐渐
			# 用户名列，字符串类型，指定长度
			username = models.CharField(max_length=32)
			password = models.CharField(max_length=64)

	b. 注册APP
		INSTALLED_APPS = [
			'django.contrib.admin',
			'django.contrib.auth',
			'django.contrib.contenttypes',
			'django.contrib.sessions',
			'django.contrib.messages',
			'django.contrib.staticfiles',
			'app01',
		]
	c. 执行命令
		 manage.py makemigrations
		python manage.py migrate

	1、根据类自动创建数据库表
		# app下的models.py
		settings下注册app名字
		settings下找到installed_app
		加上app名字，例如app01

		默认使用sqllite

		mysql 连接方式
		替换databases
			DATABASES = {
				'default': {
				'ENGINE': 'django.db.backends.mysql',
				'NAME':'dbname',
				'USER': 'root',
				'PASSWORD': 'xxx',
				'HOST': '',
				'PORT': '',
				}
			}

			# 由于Django内部连接MySQL时使用的是MySQLdb模块，而python3中还无此模块，所以需要使用pymysql来代替

			# 如下设置放置的与project同名的配置的 __init__.py文件中

			import pymysql
			pymysql.install_as_MySQLdb()　
    2、根据类对数据库表中的数据进行各种操作

	   创建数据
		app01的 views下
		from app01 import models
		def orm(request):
			#一.创建数据 三种方式，推荐使用1,2
			#1.models.UserInfo.objects.create(username='root',password='123')
			models.UserInfo.objects.create(username='root',password='123')
			#2.dic = {'username':'eric', 'password':'666'}
			#  models.UserInfo.objects.create(**dic)

			#3.obj = models.UserInfo(username='alex', password='333')
			#  obj.save()
			request HttpResponse('orm')

			# 二.查数据
			result = models.UserInfo.objects.all()
			# result Queryset类型，==》django的一个列表
			# [obj1,obj2,obj3] 每一个元素，都是UserInfo的对象
			print(result)
			for row in result:
				print(row.id,row.username,row.password)

			# 条件查，where username = 'root' and password = '123'
			result = models.UserInfo.objects.filter(username='root',password='123')
			result依旧是一个列表，因为可能有多个username=root,password=‘123’，也可能是一条数据


			# 三 删除数据
			models.UserInfo.objects.all().delete() 删除所有数据
			models.UserInfo.Ojbects.filter(id='4').delete()  删除id=4的
			models.UserInfo.Ojbects.filter(username='alex').delete()  删除username=alex的

			# 修改，更新数据
			models.UserInfo.objects.all().update(password='999') 修改所有密码为999
			models.UserInfo.objects.filter(username='alex').update('password='abc') 修改alex密码为abc

			models.UserInfo.objects.filter(username='alex',password='123').update(password='456')


