一、路由系统  URL
    1.url(r'^index/', views.index),  url(r'^index/', views.Index.as_view()),
    2.url(r'^detail-(\d+).html', views.detail),
    3.url(r'^detail-(?P<nid>\d+)-(?P<uid>\d+).html', views.detail)

            def detail(request, *args, **kwargs):
                pass
            def func(request,nid,uid):
                pass
            def func(request,**kwargs):
                kwarts = {'nid':1,'uid':3}

            def func(request,*args, **kwargs):
                args=(2,9)
    4.name
      对URL路由关系进行命名：**** 以后根据此名称生成想要的url *****

      url(r'^auv/', views.index, name='i1')
      url(r'^yug/(\d+)', views.index, name='i2')
      url(r'^buy/(?P<pid>\d+)/((?P<nid>\d+)/', views.index, name='i3')
          form表单中 action = {% url "i1" %}
          form表单中 action = {% url "i2" num %}
          form表单中 action = {% url "i2" 3 %} 一个\d+ 一个数字，多个\d+多个数字 空格分离
          form表单中 action = {% url "i2" 3 %}


      def func(request, *args, **kwargs):
        from django.urls import reverse
        url1 = reverse('i1')                            # auv/
        url2 = reverse('i2',args = (1,2,))              # yug/1/2/
        url3 = reverse('i3', kwargs={'pid':1,"nid":9}   # buy/1/9/

      xxx.html
        {% url "i1" %}                  # auv/
        {% url "i2" 1 2 %}              # yug/1/2/
        {% url "i3" nid=3 pid=4 %}      # buy/3/4/



        注：当前的url 获取
        request.path_info

    5. 路由分发


二：视图 views
    1.
        request.GET
        request.POST
        request.FILES
    2.
        # checkbox 等多选的内容
        request.POST.getList()
    3.
        # 上传文件 form 标签做特殊设置 enctype="multipart/form-data"
        obj = request.FILES.get('filename')
        file_path = os.path.join('upload',obj.name)
        print(file_path)
        f = open(obj.name,mode='wb)
        for item in obj.chunks():
            f.write(item)
        f.close()
    4.  FBV  & CBV
        FBV: function   base    view
        CBV: class  base    view

        FBV:
            urls.py
                index   -->     view.函数名
            view.py
                def 函数名(request):

        CBV
            urls.py
                index   -->     view.classname.as_view()
四： ORM操作
    select * from tb where id>1
    对应关系
    models.tb.objects.filter(id_gt=1)
    id=1
    models.tb.objects.filter(id=1)
    id>1
    models.tb.objects.filter(id_lt=1)

    创建类
	a.先写类：
		from django.db import models

		#app01 userinfo
		class UserInfo(models.Model):
			#id列，自增，逐渐
			# 用户名列，字符串类型，指定长度
			username = models.CharField(max_length=32)
			password = models.CharField(max_length=64)

	b. 注册APP
		INSTALLED_APPS = [
			'django.contrib.admin',
			'django.contrib.auth',
			'django.contrib.contenttypes',
			'django.contrib.sessions',
			'django.contrib.messages',
			'django.contrib.staticfiles',
			'app01',
		]
	c. 执行命令
		 manage.py makemigrations
		python manage.py migrate

	1、根据类自动创建数据库表
		# app下的models.py
		settings下注册app名字
		settings下找到installed_app
		加上app名字，例如app01

		默认使用sqllite

		mysql 连接方式
		替换databases
			DATABASES = {
				'default': {
				'ENGINE': 'django.db.backends.mysql',
				'NAME':'dbname',
				'USER': 'root',
				'PASSWORD': 'xxx',
				'HOST': '',
				'PORT': '',
				}
			}

			# 由于Django内部连接MySQL时使用的是MySQLdb模块，而python3中还无此模块，所以需要使用pymysql来代替

			# 如下设置放置的与project同名的配置的 __init__.py文件中

			import pymysql
			pymysql.install_as_MySQLdb()　
    2、根据类对数据库表中的数据进行各种操作

	   创建数据
		app01的 views下
		from app01 import models
		def orm(request):
			#一.创建数据 三种方式，推荐使用1,2
			#1.models.UserInfo.objects.create(username='root',password='123')
			models.UserInfo.objects.create(username='root',password='123')
			#2.dic = {'username':'eric', 'password':'666'}
			#  models.UserInfo.objects.create(**dic)

			#3.obj = models.UserInfo(username='alex', password='333')
			#  obj.save()
			request HttpResponse('orm')

			# 二.查数据
			result = models.UserInfo.objects.all()
			# result Queryset类型，==》django的一个列表
			# [obj1,obj2,obj3] 每一个元素，都是UserInfo的对象
			print(result)
			for row in result:
				print(row.id,row.username,row.password)

			# 条件查，where username = 'root' and password = '123'
			result = models.UserInfo.objects.filter(username='root',password='123')
			result依旧是一个列表，因为可能有多个username=root,password=‘123’，也可能是一条数据


			# 三 删除数据
			models.UserInfo.objects.all().delete() 删除所有数据
			models.UserInfo.Ojbects.filter(id='4').delete()  删除id=4的
			models.UserInfo.Ojbects.filter(username='alex').delete()  删除username=alex的

			# 修改，更新数据
			models.UserInfo.objects.all().update(password='999') 修改所有密码为999
			models.UserInfo.objects.filter(username='alex').update('password='abc') 修改alex密码为abc

			models.UserInfo.objects.filter(username='alex',password='123').update(password='456')


	字段分类：
		字符串类型

		数字类型

		时间类型

		二进制类型

	AutoField(Field)
        - int自增列，必须填入参数 primary_key=True

    BigAutoField(AutoField)
        - bigint自增列，必须填入参数 primary_key=True

        注：当model中如果没有自增列，则自动会创建一个列名为id的列
        from django.db import models

        class UserInfo(models.Model):
            # 自动创建一个列名为id的且为自增的整数列
            username = models.CharField(max_length=32)

        class Group(models.Model):
            # 自定义自增列
            nid = models.AutoField(primary_key=True)
            name = models.CharField(max_length=32)

    SmallIntegerField(IntegerField):
        - 小整数 -32768 ～ 32767

    PositiveSmallIntegerField(PositiveIntegerRelDbTypeMixin, IntegerField)
        - 正小整数 0 ～ 32767
    IntegerField(Field)
        - 整数列(有符号的) -2147483648 ～ 2147483647

    PositiveIntegerField(PositiveIntegerRelDbTypeMixin, IntegerField)
        - 正整数 0 ～ 2147483647

    BigIntegerField(IntegerField):
        - 长整型(有符号的) -9223372036854775808 ～ 9223372036854775807

    自定义无符号整数字段

        class UnsignedIntegerField(models.IntegerField):
            def db_type(self, connection):
                return 'integer UNSIGNED'

        PS: 返回值为字段在数据库中的属性，Django字段默认的值为：
            'AutoField': 'integer AUTO_INCREMENT',
            'BigAutoField': 'bigint AUTO_INCREMENT',
            'BinaryField': 'longblob',
            'BooleanField': 'bool',
            'CharField': 'varchar(%(max_length)s)',
            'CommaSeparatedIntegerField': 'varchar(%(max_length)s)',
            'DateField': 'date',
            'DateTimeField': 'datetime',
            'DecimalField': 'numeric(%(max_digits)s, %(decimal_places)s)',
            'DurationField': 'bigint',
            'FileField': 'varchar(%(max_length)s)',
            'FilePathField': 'varchar(%(max_length)s)',
            'FloatField': 'double precision',
            'IntegerField': 'integer',
            'BigIntegerField': 'bigint',
            'IPAddressField': 'char(15)',
            'GenericIPAddressField': 'char(39)',
            'NullBooleanField': 'bool',
            'OneToOneField': 'integer',
            'PositiveIntegerField': 'integer UNSIGNED',
            'PositiveSmallIntegerField': 'smallint UNSIGNED',
            'SlugField': 'varchar(%(max_length)s)',
            'SmallIntegerField': 'smallint',
            'TextField': 'longtext',
            'TimeField': 'time',
            'UUIDField': 'char(32)',

    BooleanField(Field)
        - 布尔值类型

    NullBooleanField(Field):
        - 可以为空的布尔值

    CharField(Field)
        - 字符类型
        - 必须提供max_length参数， max_length表示字符长度

    TextField(Field)
        - 文本类型

    EmailField(CharField)：
        - 字符串类型，Django Admin以及ModelForm中提供验证机制

    IPAddressField(Field)
        - 字符串类型，Django Admin以及ModelForm中提供验证 IPV4 机制

    GenericIPAddressField(Field)
        - 字符串类型，Django Admin以及ModelForm中提供验证 Ipv4和Ipv6
        - 参数：
            protocol，用于指定Ipv4或Ipv6， 'both',"ipv4","ipv6"
            unpack_ipv4， 如果指定为True，则输入::ffff:192.0.2.1时候，可解析为192.0.2.1，开启刺功能，需要protocol="both"

    URLField(CharField)
        - 字符串类型，Django Admin以及ModelForm中提供验证 URL

    SlugField(CharField)
        - 字符串类型，Django Admin以及ModelForm中提供验证支持 字母、数字、下划线、连接符（减号）

    CommaSeparatedIntegerField(CharField)
        - 字符串类型，格式必须为逗号分割的数字

    UUIDField(Field)
        - 字符串类型，Django Admin以及ModelForm中提供对UUID格式的验证

    FilePathField(Field)
        - 字符串，Django Admin以及ModelForm中提供读取文件夹下文件的功能
        - 参数：
                path,                      文件夹路径
                match=None,                正则匹配
                recursive=False,           递归下面的文件夹
                allow_files=True,          允许文件
                allow_folders=False,       允许文件夹

    FileField(Field)
        - 字符串，路径保存在数据库，文件上传到指定目录
        - 参数：
            upload_to = ""      上传文件的保存路径
            storage = None      存储组件，默认django.core.files.storage.FileSystemStorage

    ImageField(FileField)
        - 字符串，路径保存在数据库，文件上传到指定目录
        - 参数：
            upload_to = ""      上传文件的保存路径
            storage = None      存储组件，默认django.core.files.storage.FileSystemStorage
            width_field=None,   上传图片的高度保存的数据库字段名（字符串）
            height_field=None   上传图片的宽度保存的数据库字段名（字符串）

    DateTimeField(DateField)
        - 日期+时间格式 YYYY-MM-DD HH:MM[:ss[.uuuuuu]][TZ]

    DateField(DateTimeCheckMixin, Field)
        - 日期格式      YYYY-MM-DD

    TimeField(DateTimeCheckMixin, Field)
        - 时间格式      HH:MM[:ss[.uuuuuu]]

    DurationField(Field)
        - 长整数，时间间隔，数据库中按照bigint存储，ORM中获取的值为datetime.timedelta类型

    FloatField(Field)
        - 浮点型

    DecimalField(Field)
        - 10进制小数
        - 参数：
            max_digits，小数总长度
            decimal_places，小数位长度

    BinaryField(Field)
        - 二进制类型

字段


	字段参数：
		常用参数

			null                数据库中字段是否可以为空
			db_column           数据库中字段的列名 username = models.CharField(max_length=32,db_column='ua') 生成数据库字段名就叫ua
			db_tablespace
			default             数据库中字段的默认值
			primary_key         数据库中字段是否为主键
			db_index            数据库中字段是否可以建立索引  db_index=true 建立索引 unique=true 唯一索引
			unique              数据库中字段是否可以建立唯一索引
			unique_for_date     数据库中字段【日期】部分是否可以建立唯一索引
			unique_for_month    数据库中字段【月】部分是否可以建立唯一索引
			unique_for_year     数据库中字段【年】部分是否可以建立唯一索引

			auto_now			ctime = modules.DataTime(auto_now_add=True)  第一条数据建立的当前时间
			auto_now_add		uptime = modules.DataTime(auto_now = True)   以后此条数据最新的更新时间
			建立字段之后，数据更新和新增时，不需要指定这两个字段的值，数据库会自动获取
				此种方式不会自动更新时间
				#obj = UserGroup.objects.filter(id=1).update(caption='CEO')

				auto_now  auth_now_add 使用特定条件
				#obj = UserGroup.objects.filter(id=1).first()
				#obj.caption = 'COO'
				#obj.save

			verbose_name        Admin中显示的中文字段名称
			blank               Admin中是否允许用户输入为空
			editable            Admin中是否可以编辑 ，False就直接隐藏
			help_text           Admin中该字段的提示信息

			choices             Admin中显示选择框(下拉框)的内容，
			                    用不变动的数据放在内存中从而避免跨表操作
								如：gf = models.IntegerField(choices=[(0, '何穗'),(1, '大表姐'),],default=1)

			    choices用法：



			error_messages      自定义错误信息（字典类型），从而定制想要显示的错误信息；
								字典健：null, blank, invalid, invalid_choice, unique, and unique_for_date
								如：{'null': "不能为空.", 'invalid': '格式错误'}

			validators          自定义错误验证（列表类型），从而定制想要的验证规则
								from django.core.validators import RegexValidator
								from django.core.validators import EmailValidator,URLValidator,DecimalValidator,\
								MaxLengthValidator,MinLengthValidator,MaxValueValidator,MinValueValidator
								如：
									test = models.CharField(
										max_length=32,
										error_messages={
											'c1': '优先错信息1',
											'c2': '优先错信息2',
											'c3': '优先错信息3',
										},
										validators=[
											RegexValidator(regex='root_\d+', message='错误了', code='c1'),
											RegexValidator(regex='root_112233\d+', message='又错误了', code='c2'),
											EmailValidator(message='又错误了', code='c3'), ]
									)

        django 外键的本质就是对象的封装，封装成字段，但是不显示，值显示ID